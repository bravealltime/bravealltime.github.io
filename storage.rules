rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Allow authenticated users to upload evidence files
    match /evidence/{billKey}/{fileName} {
      allow read: if request.auth != null && 
        (resource.metadata.uploadedBy == request.auth.uid || 
         hasPermission('canViewEvidence', getRoomFromBillKey(billKey)));
      
      allow write: if request.auth != null && 
        request.resource.size < 5 * 1024 * 1024 && // 5MB limit
        request.resource.contentType.matches('image/.*') && // Only images
        (resource == null || resource.metadata.uploadedBy == request.auth.uid) &&
        hasPermission('canUploadEvidence', getRoomFromBillKey(billKey));
      
      allow delete: if request.auth != null && 
        (resource.metadata.uploadedBy == request.auth.uid || 
         hasPermission('canDeleteEvidence', getRoomFromBillKey(billKey)));
    }
    
    // Allow test files for validation (temporary)
    match /test/{userId}/{fileName} {
      allow read, write, delete: if request.auth != null && 
        request.auth.uid == userId;
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

// Helper function to get room from bill key (this would need to be implemented in your app)
function getRoomFromBillKey(billKey) {
  // This is a placeholder - in practice, you might need to query the database
  // or include room information in the file path
  return 'default';
}

// Helper function to check permissions (this would need to be implemented in your app)
function hasPermission(permission, room) {
  // This is a placeholder - in practice, you would check against user roles
  // For now, allow all authenticated users
  return request.auth != null;
} 
} 